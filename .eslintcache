[{"/home/shyjan/creat_application/my-app/src/index.js":"1","/home/shyjan/creat_application/my-app/src/App.js":"2","/home/shyjan/creat_application/my-app/src/formikform.js":"3","/home/shyjan/creat_application/my-app/src/inputs.js":"4","/home/shyjan/creat_application/my-app/src/mainpage.js":"5","/home/shyjan/creat_application/my-app/src/validation.js":"6","/home/shyjan/creat_application/my-app/src/samplearr.js":"7"},{"size":358,"mtime":1610372600305,"results":"8","hashOfConfig":"9"},{"size":399,"mtime":1610100695719,"results":"10","hashOfConfig":"9"},{"size":4598,"mtime":1610091543803,"results":"11","hashOfConfig":"9"},{"size":2006,"mtime":1610434342959,"results":"12","hashOfConfig":"9"},{"size":10132,"mtime":1610107401670,"results":"13","hashOfConfig":"9"},{"size":2066,"mtime":1610091925554,"results":"14","hashOfConfig":"9"},{"size":1031,"mtime":1610372700956,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},"1ggb8oi",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"19"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"19"},"/home/shyjan/creat_application/my-app/src/index.js",["34","35","36","37","38"],"\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { validateFields } from './validation';\nimport Form from './mainpage.js';\nimport Regform from './formikform';\nimport App from \"./App.js\";\nimport Input from \"./inputs.js\";\nimport SampleArr from \"./samplearr.js\";\n\nReactDOM.render(\n\t\n\t\n\t\t<Input />, \n\t\t\n\t\n\tdocument.getElementById('root')\n\n);\n",["39","40"],"/home/shyjan/creat_application/my-app/src/App.js",[],"/home/shyjan/creat_application/my-app/src/formikform.js",[],"/home/shyjan/creat_application/my-app/src/inputs.js",[],"/home/shyjan/creat_application/my-app/src/mainpage.js",["41"],"import React, { Component } from 'react';\nimport { validateFields } from './validation';\nimport classnames from 'classnames';\n\nconst initialState = {\n\tfirsname: {\n    value: '',\n    validateOnChange: false,\n    error: ''\n  },\n  lastname: {\n    value: '',\n    validateOnChange: false,\n    error: ''\n  },\n  email: {\n    value: '',\n    validateOnChange: false,\n    error: ''\n  },\n  password: {\n    value: '',\n    validateOnChange: false,\n    error: ''\n  },\n  repeat_password: {\n    value: '',\n    validateOnChange: false,\n    error: ''\n  },\n  submitCalled: false,\n  allFieldsValidated: false\n};\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n    this.state = initialState;\n    console.log(initialState)\n  }   \n\n  /*\n   * validates the field onBlur if sumbit button is not clicked\n   * set the validateOnChange to true for that field\n   * check for error\n   */\n  handleBlur(validationFunc, evt) {\n    const field = evt.target.name;\n    // console.log(field)\n    // validate onBlur only when validateOnChange for that field is false\n    // because if validateOnChange is already true there is no need to validate onBlur\n    if (\n      this.state[field]['validateOnChange'] === false &&\n      this.state.submitCalled === false\n    ) {\n      this.setState(state => ({\n        [field]: {\n          ...state[field],\n          validateOnChange: true,\n          error: validationFunc(state[field].value)\n        }\n      }));\n    }\n    return;\n  }\n\n  /*\n   * update the value in state for that field\n   * check for error if validateOnChange is true\n   */\n  handleChange(validationFunc, evt) {\n    const field = evt.target.name;\n    const fieldVal = evt.target.value;\n    this.setState(state => ({\n      [field]: {\n        ...state[field],\n        value: fieldVal,\n        error: state[field]['validateOnChange'] ? validationFunc(fieldVal) : ''\n      }\n    }));\n  }\n\n  /*\n   * validate all fields\n   * check if all fields are valid if yes then submit the Form\n   * otherwise set errors for the feilds in the state\n   */\n  handleSubmit(evt) {\n    evt.preventDefault();\n    // validate all fields\n    const { firsname, lastname,email, password,repeat_password } = this.state;\n    const firsnameError = validateFields.validatefirsname(firsname.value);\n    const lastnameError = validateFields.validatelastname(lastname.value);\n    const emailError = validateFields.validateEmail(email.value);\n    const passwordError = validateFields.validatePassword(password.value);\n    const repeat_passwordError = validateFields.validaterepeat_password(repeat_password.value);\n\n\n    if(repeat_password.value === password.value && [firsnameError,lastnameError,emailError,passwordError,repeat_passwordError].every(e => e === false)){\n    \t// console.log(repeat_password.value,password.value)\n    \tthis.setState({ passwordfaild:false});\n      this.setState({ ...initialState, allFieldsValidated : true });\n      this.showAllFieldsValidated();\n    }\n    // if (repeat_password.value != password.value) \n    // {\n    //   // no errors submit the form\n    //   // console.log('success');\n    //   // alert(\"Enter the same password\")\n    //   // clear state and show all fields are validated\n    //   this.setState({ passwordfaild:true});\n\n    //   // this.showAllFieldsValidated();\n    \n    // } \n    else \n    {\n      // update the state with errors\n      this.setState(state => ({\n      \tfirsname: {\n          ...state.firsname,\n          validateOnChange: true,\n          error: firsnameError\n        },\n        lastname: {\n          ...state.lastname,\n          validateOnChange: true,\n          error: lastnameError\n        },\n\n        email: {\n          ...state.email,\n          validateOnChange: true,\n          error: emailError\n        },\n        password: {\n          ...state.password,\n          validateOnChange: true,\n          error: passwordError\n        },\n        repeat_password: {\n          ...state.repeat_password,\n          validateOnChange: true,\n          error: repeat_passwordError\n        }\n      }));\n    }\n    if(repeat_password.value != password.value){\n      this.setState({ passwordfaild:true});\n    }\n    \n  }\n\n  showAllFieldsValidated() {\n    setTimeout(() => {\n      this.setState({ allFieldsValidated: false });\n    }, 1500);\n  }\n\n  render() {\n    const { firsname,lastname, email, password,repeat_password, allFieldsValidated, passwordfaild} = this.state;\n    return (\n      <div className=\"Form col-md-8 col-lg-6\">\n        <div className=\"card shadow\">\n          <div className=\"card-header\">\n            <h4 className=\"text-center\">Form Validation React</h4>\n          </div>\n\n          <div className=\"card-body\">\n            {allFieldsValidated && (\n              <p className=\"text-success text-center\">\n                Success, All fields are validated\n              </p>\n            )}\n            \n\n\n            {/* Form Starts Here */}\n            <form onSubmit={evt => this.handleSubmit(evt)}>\n        \t{/*firsname*/}\n        \t<div className = \"flexdisplay\">\n\t            <div className=\"form-group\">\n\t                <label>Firsname</label>\n\t                <input\n\t                  type=\"text\"\n\t                  name=\"firsname\"\n\t                  value={firsname.value}\n\t                  placeholder=\"Enter your firsname\"\n\t                  className={classnames(\n\t                    'form-control',\n\t                    { 'is-valid': firsname.error === false },\n\t                    { 'is-invalid': firsname.error }\n\t                  )}\n\t                  onChange={evt =>\n\t                    this.handleChange(validateFields.validatefirsname, evt)\n\t                  }\n\t                  onBlur={evt =>\n\t                    this.handleBlur(validateFields.validatefirsname, evt)\n\t                  }\n\t                />\n\t                <div className=\"invalid-feedback\">{firsname.error}</div>\n\t              </div>\n\t          \t{/*lastname*/}\n\t            <div className=\"form-group\" id = \"space\">\n\t                <label>Lastname</label>\n\t                <input\n\t                  type=\"text\"\n\t                  name=\"lastname\"\n\t                  value={lastname.value}\n\t                  \n\t                  placeholder=\"Enter your lastname\"\n\t                  className={classnames(\n\t                    'form-control',\n\t                    { 'is-valid': lastname.error === false },\n\t                    { 'is-invalid': lastname.error }\n\t                  )}\n\t                  onChange={evt =>\n\t                    this.handleChange(validateFields.validatelastname, evt)\n\t                  }\n\t                  onBlur={evt =>\n\t                    this.handleBlur(validateFields.validatelastname, evt)\n\t                  }\n\t                />\n\t                <div className=\"invalid-feedback\">{lastname.error}</div>\n\t              </div>\n              </div>\n              {/* Email field */}\n              <div className=\"form-group\">\n                <label>Email</label>\n                <input\n                  type=\"text\"\n                  name=\"email\"\n                  value={email.value}\n                  placeholder=\"Enter your email\"\n                  className={classnames(\n                    'form-control',\n                    { 'is-valid': email.error === false },\n                    { 'is-invalid': email.error }\n                  )}\n                  onChange={evt =>\n                    this.handleChange(validateFields.validateEmail, evt)\n                  }\n                  onBlur={evt =>\n                    this.handleBlur(validateFields.validateEmail, evt)\n                  }\n                />\n                <div className=\"invalid-feedback\">{email.error}</div>\n              </div>\n\n          {/* Password field */}\n              <div className = \"flexdisplay\">\n\t              <div className=\"form-group\">\n\t                <label>Password</label>\n\t                <input\n\t                  type=\"password\"\n\t                  name=\"password\"\n\t                  value={password.value}\n\t                  placeholder=\"Enter your password\"\n\t                  className={classnames(\n\t                    'form-control',\n\t                    { 'is-valid': password.error === false },\n\t                    { 'is-invalid': password.error }\n\t                  )}\n\t                  onChange={evt =>\n\t                    this.handleChange(validateFields.validatePassword, evt)\n\t                  }\n\t                  onBlur={evt =>\n\t                    this.handleBlur(validateFields.validatePassword, evt)\n\t                  }\n\t                />\n\t                <div className=\"invalid-feedback\">{password.error}</div>\n\t              </div>\n\t          \t{/* repeat_password field */}\n\t              <div className=\"form-group\" id = \"gap\">\n\t                <label>repeat_password</label>\n\t                <input\n\t                  type=\"password\"\n\t                  name=\"repeat_password\"\n\n\t                  value={repeat_password.value}\n\t                  placeholder=\"repeat password\"\n\t                  className={classnames(\n\t                    'form-control',\n\t                    { 'is-valid': repeat_password.error === false },\n\t                    { 'is-invalid': repeat_password.error }\n\t                  )}\n\t                  onChange={evt =>\n\t                    this.handleChange(validateFields.validaterepeat_password, evt)\n\t                  }\n\t                  onBlur={evt =>\n\t                    this.handleBlur(validateFields.validaterepeat_password, evt)\n\t                  }\n\t                />\n\t                <div className=\"invalid-feedback\">{repeat_password.error}</div>\n\t                {passwordfaild && (\n              \t\t<p className=\"text-danger text-center\">\n               \t\t\t Enter same password\n             \t\t </p>\n           \t\t\t )}\n\t              </div>\n              </div>\n              <button\n                type=\"submit\"\n                className=\"btn btn-secondary btn-block\"\n                onMouseDown={() => this.setState({ submitCalled: true })}\n              >\n                Submit\n              </button>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Form;\n","/home/shyjan/creat_application/my-app/src/validation.js",[],"/home/shyjan/creat_application/my-app/src/samplearr.js",["42"],"import React from 'react';\n\nclass SampleArr extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tsample : [\"first\", \"second\"]\t\t\t\n\t\t}\n\t\tthis.onchanging = this.onchanging.bind(this)\n\t\tthis.buttonclick = this.buttonclick.bind(this)\n\n\t}\n\tonchanging(e){\n\t\tconst name = e.target.name\n\t\tconst values = e.target.value\n\t\tthis.setState({values}, () => {\n\t\t\tconsole.log(this.state)\n\t\t})\n\t}\n\tbuttonclick(){\n\t\tconst a = this.state.sample //a = [\"first\", \"second\"]\n\t\ta.push(this.state.values)// a = [\"first\", \"second\", \"third\"]\n\t\tthis.setState({\n\t\t\tsample:a\n\t\t})\n\t\tconsole.log(this.state.sample)\n\t}\n\tarrmaping(){\n\t\treturn this.state.sample.map((numbers) =>{\n\t\t\treturn <li>{numbers}</li>\n\t\t})\n\t}\n\t\n\trender(){\n\n\t\treturn(\n\t\t\t\t<div>\n\t\t\t\t\t<input type = \"text\" name= \"first1\" placeholder = \"Enter value\" value ={this.state.sample.value} onChange = {this.onchanging} />\n\t\t\t\t\t<button type = \"button\" onClick = {this.buttonclick}>click</button>\n\t\t\t\t\t<ul>{this.arrmaping()}</ul>\n\n\t\t\t\t</div>\n\t\t\t)\n\t}\n}\nexport default SampleArr;",{"ruleId":"43","severity":1,"message":"44","line":4,"column":10,"nodeType":"45","messageId":"46","endLine":4,"endColumn":24},{"ruleId":"43","severity":1,"message":"47","line":5,"column":8,"nodeType":"45","messageId":"46","endLine":5,"endColumn":12},{"ruleId":"43","severity":1,"message":"48","line":6,"column":8,"nodeType":"45","messageId":"46","endLine":6,"endColumn":15},{"ruleId":"43","severity":1,"message":"49","line":7,"column":8,"nodeType":"45","messageId":"46","endLine":7,"endColumn":11},{"ruleId":"43","severity":1,"message":"50","line":9,"column":8,"nodeType":"45","messageId":"46","endLine":9,"endColumn":17},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":147,"column":30,"nodeType":"57","messageId":"58","endLine":147,"endColumn":32},{"ruleId":"43","severity":1,"message":"59","line":14,"column":9,"nodeType":"45","messageId":"46","endLine":14,"endColumn":13},"no-unused-vars","'validateFields' is defined but never used.","Identifier","unusedVar","'Form' is defined but never used.","'Regform' is defined but never used.","'App' is defined but never used.","'SampleArr' is defined but never used.","no-native-reassign",["60"],"no-negated-in-lhs",["61"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'name' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]