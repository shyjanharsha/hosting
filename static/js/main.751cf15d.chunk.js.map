{"version":3,"sources":["validation.js","mainpage.js","formikform.js","App.js","inputs.js","samplearr.js","index.js"],"names":["validateFields","firsname","validator","isEmpty","isAlpha","isLength","min","lastname","email","isEmail","password","repeat_password","initialState","value","validateOnChange","error","submitCalled","allFieldsValidated","Component","React","App","Input","props","state","students","Name","Age","RollNo","handleChange","bind","onSubmit","evt","key","target","name","this","setState","arrObj","arrpush","push","console","log","map","student","index","Object","keys","type","placeholder","onChange","onClick","renderHead","renderTableData","ReactDOM","render","document","getElementById"],"mappings":"gNAuEMA,EAAiB,I,yGAvDJC,GACf,OAAGC,IAAUC,QAAQF,GACZ,wBAELC,IAAUE,QAAQH,IAIlBC,IAAUG,SAASJ,EAAU,CAAEK,IAAK,KAC/B,sCAJA,2B,uCAUMC,GACf,OAAGL,IAAUC,QAAQI,GACZ,oBAELL,IAAUE,QAAQG,IAGlBL,IAAUG,SAASE,EAAU,CAAED,IAAK,KAC/B,2CAHA,yB,oCAOGE,GACZ,OAAIN,IAAUC,QAAQK,GACb,qBACGN,IAAUO,QAAQD,IACrB,kB,uCAKME,GACf,OAAIR,IAAUC,QAAQO,GACb,wBACGR,IAAUG,SAASK,EAAU,CAAEJ,IAAK,KACvC,4C,8CAIaK,GACtB,OAAIT,IAAUC,QAAQQ,GACb,+BACGT,IAAUG,SAASM,EAAiB,CAAEL,IAAK,KAC9C,qD,oDC5DPM,EAAe,CACpBX,SAAU,CACPY,MAAO,GACPC,kBAAkB,EAClBC,MAAO,IAETR,SAAU,CACRM,MAAO,GACPC,kBAAkB,EAClBC,MAAO,IAETP,MAAO,CACLK,MAAO,GACPC,kBAAkB,EAClBC,MAAO,IAETL,SAAU,CACRG,MAAO,GACPC,kBAAkB,EAClBC,MAAO,IAETJ,gBAAiB,CACfE,MAAO,GACPC,kBAAkB,EAClBC,MAAO,IAETC,cAAc,EACdC,oBAAoB,G,GAEHC,Y,eC7BGC,IAAMD,U,cCebE,I,QCqDAC,E,kDApEb,WAAYC,GAAO,IAAD,8BACjB,cAAMA,IACIC,MAAQ,CACTC,SAAS,CAAC,CAACC,KAAK,SAASC,IAAI,KAAKC,OAAO,WAC1C,CAACF,KAAK,WAAWC,IAAI,KAAKC,OAAO,aAEpC,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAPJ,E,yDASLE,GACV,IAAMC,EAAMD,EAAIE,OAAOC,KACjBrB,EAAQkB,EAAIE,OAAOpB,MACzBsB,KAAKC,SAAL,eAAgBJ,EAAKnB,M,iCAIrB,IAAMwB,EAAS,CAACZ,KAAKU,KAAKZ,MAAME,KAAKC,IAAIS,KAAKZ,MAAMG,IAAIC,OAAOQ,KAAKZ,MAAMI,QACpEW,EAAUH,KAAKZ,MAAMC,SAC3Bc,EAAQC,KAAKF,GACbF,KAAKC,SAAS,CACbC,OAAOC,IAERE,QAAQC,IAAIH,GACZE,QAAQC,IAAIN,KAAKZ,MAAMG,O,wCAGtB,OAAOS,KAAKZ,MAAMC,SAASkB,KAAI,SAACC,EAASC,GAGtC,OACG,+BACG,6BAAKD,EAAQlB,OACb,6BAAKkB,EAAQjB,MACb,6BAAKiB,EAAQhB,WAHLiB,Q,mCAYpB,OAFaC,OAAOC,KAAKX,KAAKZ,MAAMC,SAAS,IAE/BkB,KAAI,SAACV,EAAIY,GACvB,OAAO,6BAAiBZ,GAARY,Q,+BAKjB,IAAD,EAC+BT,KAAKZ,MAAMC,SAA9BC,EADZ,EACYA,KAAKC,EADjB,EACiBA,IAAIC,EADrB,EACqBA,OAEpB,OAEE,gCACC,uBAAOoB,KAAO,OAAOC,YAAa,iBAAiBd,KAAK,OAAOrB,MAASY,EAAOwB,SAAUd,KAAKP,eAC9F,uBAAOmB,KAAO,OAAOC,YAAc,gBAAgBd,KAAK,MAAOrB,MAASa,EAAKuB,SAAUd,KAAKP,eAC5F,uBAAOmB,KAAO,OAAOC,YAAc,mBAAmBd,KAAK,SAASrB,MAAQc,EAAQsB,SAAUd,KAAKP,eACnG,wBAAQmB,KAAO,SAASG,QAASf,KAAKL,SAAtC,mBACA,kCACA,gCACC,6BAAKK,KAAKgB,iBAEV,gCAAQhB,KAAKiB,8B,GA/DEjC,IAAMD,WCDHC,IAAMD,UCQ9BmC,IAASC,OAGP,cAAC,EAAD,IAGDC,SAASC,eAAe,W","file":"static/js/main.751cf15d.chunk.js","sourcesContent":["import validator from 'validator';\n\n/*\n * This class contains methods for validating fields using 'validator.js' library methods\n * The methods return error message if validation failed and false otherwise\n * You can use all supported validators and sanitizers of 'validator.js' libaray\n * See their docs here https://github.com/validatorjs/validator.js\n */\n\nclass ValidateFields {\n  /*\n   * A method that takes in the email\n   * Validates it\n   * Returns the response either error or false if there is no error\n   */\n\n  validatefirsname(firsname){\n    if(validator.isEmpty(firsname)){\n      return 'firstname is required';\n    }\n    if(!validator.isAlpha(firsname)){\n      return 'name must be in letter';\n    }\n\n    if(!validator.isLength(firsname, { min: 6 })){\n      return 'Name should be minimum 6 characters';\n    }else{\n\n    }\n    return false;\n  }\n  validatelastname(lastname){\n    if(validator.isEmpty(lastname)){\n      return 'lastname required';\n    }\n    if(!validator.isAlpha(lastname)){\n      return 'name must be letters';\n    }\n    if(!validator.isLength(lastname, { min: 5 })){\n      return 'lastname should be minimum 5  characters';\n    }\n    return false;\n  }\n  validateEmail(email) {\n    if (validator.isEmpty(email)) {\n      return 'Email is required';\n    } else if (!validator.isEmail(email)) {\n      return 'Invalid Email';\n    }\n    return false;\n  }\n\n  validatePassword(password) {\n    if (validator.isEmpty(password)) {\n      return 'Password is required';\n    } else if (!validator.isLength(password, { min: 8 })) {\n      return 'Password should be minimum 8 characters';\n    }\n    return false;\n  }\n  validaterepeat_password(repeat_password) {\n    if (validator.isEmpty(repeat_password)) {\n      return 'repeat_password is required';\n    } else if (!validator.isLength(repeat_password, { min: 8 })) {\n      return 'repeat_password should be minimum 8 characters';\n    }\n    return false;\n  }\n\n}\n\nconst validateFields = new ValidateFields();\n\n// export the class instance, so we can import and use it anywhere\nexport { validateFields };","import React, { Component } from 'react';\nimport { validateFields } from './validation';\nimport classnames from 'classnames';\n\nconst initialState = {\n\tfirsname: {\n    value: '',\n    validateOnChange: false,\n    error: ''\n  },\n  lastname: {\n    value: '',\n    validateOnChange: false,\n    error: ''\n  },\n  email: {\n    value: '',\n    validateOnChange: false,\n    error: ''\n  },\n  password: {\n    value: '',\n    validateOnChange: false,\n    error: ''\n  },\n  repeat_password: {\n    value: '',\n    validateOnChange: false,\n    error: ''\n  },\n  submitCalled: false,\n  allFieldsValidated: false\n};\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n    this.state = initialState;\n    console.log(initialState)\n  }   \n\n  /*\n   * validates the field onBlur if sumbit button is not clicked\n   * set the validateOnChange to true for that field\n   * check for error\n   */\n  handleBlur(validationFunc, evt) {\n    const field = evt.target.name;\n    // console.log(field)\n    // validate onBlur only when validateOnChange for that field is false\n    // because if validateOnChange is already true there is no need to validate onBlur\n    if (\n      this.state[field]['validateOnChange'] === false &&\n      this.state.submitCalled === false\n    ) {\n      this.setState(state => ({\n        [field]: {\n          ...state[field],\n          validateOnChange: true,\n          error: validationFunc(state[field].value)\n        }\n      }));\n    }\n    return;\n  }\n\n  /*\n   * update the value in state for that field\n   * check for error if validateOnChange is true\n   */\n  handleChange(validationFunc, evt) {\n    const field = evt.target.name;\n    const fieldVal = evt.target.value;\n    this.setState(state => ({\n      [field]: {\n        ...state[field],\n        value: fieldVal,\n        error: state[field]['validateOnChange'] ? validationFunc(fieldVal) : ''\n      }\n    }));\n  }\n\n  /*\n   * validate all fields\n   * check if all fields are valid if yes then submit the Form\n   * otherwise set errors for the feilds in the state\n   */\n  handleSubmit(evt) {\n    evt.preventDefault();\n    // validate all fields\n    const { firsname, lastname,email, password,repeat_password } = this.state;\n    const firsnameError = validateFields.validatefirsname(firsname.value);\n    const lastnameError = validateFields.validatelastname(lastname.value);\n    const emailError = validateFields.validateEmail(email.value);\n    const passwordError = validateFields.validatePassword(password.value);\n    const repeat_passwordError = validateFields.validaterepeat_password(repeat_password.value);\n\n\n    if(repeat_password.value === password.value && [firsnameError,lastnameError,emailError,passwordError,repeat_passwordError].every(e => e === false)){\n    \t// console.log(repeat_password.value,password.value)\n    \tthis.setState({ passwordfaild:false});\n      this.setState({ ...initialState, allFieldsValidated : true });\n      this.showAllFieldsValidated();\n    }\n    // if (repeat_password.value != password.value) \n    // {\n    //   // no errors submit the form\n    //   // console.log('success');\n    //   // alert(\"Enter the same password\")\n    //   // clear state and show all fields are validated\n    //   this.setState({ passwordfaild:true});\n\n    //   // this.showAllFieldsValidated();\n    \n    // } \n    else \n    {\n      // update the state with errors\n      this.setState(state => ({\n      \tfirsname: {\n          ...state.firsname,\n          validateOnChange: true,\n          error: firsnameError\n        },\n        lastname: {\n          ...state.lastname,\n          validateOnChange: true,\n          error: lastnameError\n        },\n\n        email: {\n          ...state.email,\n          validateOnChange: true,\n          error: emailError\n        },\n        password: {\n          ...state.password,\n          validateOnChange: true,\n          error: passwordError\n        },\n        repeat_password: {\n          ...state.repeat_password,\n          validateOnChange: true,\n          error: repeat_passwordError\n        }\n      }));\n    }\n    if(repeat_password.value != password.value){\n      this.setState({ passwordfaild:true});\n    }\n    \n  }\n\n  showAllFieldsValidated() {\n    setTimeout(() => {\n      this.setState({ allFieldsValidated: false });\n    }, 1500);\n  }\n\n  render() {\n    const { firsname,lastname, email, password,repeat_password, allFieldsValidated, passwordfaild} = this.state;\n    return (\n      <div className=\"Form col-md-8 col-lg-6\">\n        <div className=\"card shadow\">\n          <div className=\"card-header\">\n            <h4 className=\"text-center\">Form Validation React</h4>\n          </div>\n\n          <div className=\"card-body\">\n            {allFieldsValidated && (\n              <p className=\"text-success text-center\">\n                Success, All fields are validated\n              </p>\n            )}\n            \n\n\n            {/* Form Starts Here */}\n            <form onSubmit={evt => this.handleSubmit(evt)}>\n        \t{/*firsname*/}\n        \t<div className = \"flexdisplay\">\n\t            <div className=\"form-group\">\n\t                <label>Firsname</label>\n\t                <input\n\t                  type=\"text\"\n\t                  name=\"firsname\"\n\t                  value={firsname.value}\n\t                  placeholder=\"Enter your firsname\"\n\t                  className={classnames(\n\t                    'form-control',\n\t                    { 'is-valid': firsname.error === false },\n\t                    { 'is-invalid': firsname.error }\n\t                  )}\n\t                  onChange={evt =>\n\t                    this.handleChange(validateFields.validatefirsname, evt)\n\t                  }\n\t                  onBlur={evt =>\n\t                    this.handleBlur(validateFields.validatefirsname, evt)\n\t                  }\n\t                />\n\t                <div className=\"invalid-feedback\">{firsname.error}</div>\n\t              </div>\n\t          \t{/*lastname*/}\n\t            <div className=\"form-group\" id = \"space\">\n\t                <label>Lastname</label>\n\t                <input\n\t                  type=\"text\"\n\t                  name=\"lastname\"\n\t                  value={lastname.value}\n\t                  \n\t                  placeholder=\"Enter your lastname\"\n\t                  className={classnames(\n\t                    'form-control',\n\t                    { 'is-valid': lastname.error === false },\n\t                    { 'is-invalid': lastname.error }\n\t                  )}\n\t                  onChange={evt =>\n\t                    this.handleChange(validateFields.validatelastname, evt)\n\t                  }\n\t                  onBlur={evt =>\n\t                    this.handleBlur(validateFields.validatelastname, evt)\n\t                  }\n\t                />\n\t                <div className=\"invalid-feedback\">{lastname.error}</div>\n\t              </div>\n              </div>\n              {/* Email field */}\n              <div className=\"form-group\">\n                <label>Email</label>\n                <input\n                  type=\"text\"\n                  name=\"email\"\n                  value={email.value}\n                  placeholder=\"Enter your email\"\n                  className={classnames(\n                    'form-control',\n                    { 'is-valid': email.error === false },\n                    { 'is-invalid': email.error }\n                  )}\n                  onChange={evt =>\n                    this.handleChange(validateFields.validateEmail, evt)\n                  }\n                  onBlur={evt =>\n                    this.handleBlur(validateFields.validateEmail, evt)\n                  }\n                />\n                <div className=\"invalid-feedback\">{email.error}</div>\n              </div>\n\n          {/* Password field */}\n              <div className = \"flexdisplay\">\n\t              <div className=\"form-group\">\n\t                <label>Password</label>\n\t                <input\n\t                  type=\"password\"\n\t                  name=\"password\"\n\t                  value={password.value}\n\t                  placeholder=\"Enter your password\"\n\t                  className={classnames(\n\t                    'form-control',\n\t                    { 'is-valid': password.error === false },\n\t                    { 'is-invalid': password.error }\n\t                  )}\n\t                  onChange={evt =>\n\t                    this.handleChange(validateFields.validatePassword, evt)\n\t                  }\n\t                  onBlur={evt =>\n\t                    this.handleBlur(validateFields.validatePassword, evt)\n\t                  }\n\t                />\n\t                <div className=\"invalid-feedback\">{password.error}</div>\n\t              </div>\n\t          \t{/* repeat_password field */}\n\t              <div className=\"form-group\" id = \"gap\">\n\t                <label>repeat_password</label>\n\t                <input\n\t                  type=\"password\"\n\t                  name=\"repeat_password\"\n\n\t                  value={repeat_password.value}\n\t                  placeholder=\"repeat password\"\n\t                  className={classnames(\n\t                    'form-control',\n\t                    { 'is-valid': repeat_password.error === false },\n\t                    { 'is-invalid': repeat_password.error }\n\t                  )}\n\t                  onChange={evt =>\n\t                    this.handleChange(validateFields.validaterepeat_password, evt)\n\t                  }\n\t                  onBlur={evt =>\n\t                    this.handleBlur(validateFields.validaterepeat_password, evt)\n\t                  }\n\t                />\n\t                <div className=\"invalid-feedback\">{repeat_password.error}</div>\n\t                {passwordfaild && (\n              \t\t<p className=\"text-danger text-center\">\n               \t\t\t Enter same password\n             \t\t </p>\n           \t\t\t )}\n\t              </div>\n              </div>\n              <button\n                type=\"submit\"\n                className=\"btn btn-secondary btn-block\"\n                onMouseDown={() => this.setState({ submitCalled: true })}\n              >\n                Submit\n              </button>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Form;\n","import React from 'react';\nimport { Formik, Field, Form, ErrorMessage, } from 'formik';\nimport * as Yup from 'yup';\n\nclass Regform extends React.Component {\n    render() {\n        return (\n            <Formik\n                initialValues={{\n                    firstName: '',\n                    lastName: '',\n                    email: '',\n                    password: '',\n                    confirmPassword: '',\n                }}\n                validationSchema={Yup.object().shape({\n                    firstName: Yup.string()\n                        .required('First Name is required')\n                        .min(5, 'firstName must be 5 letters'),\n                    lastName: Yup.string()\n                        .required('Last Name is required'),\n                    email: Yup.string()\n                        .email('Email is invalid')\n                        .required('Email is required'),\n                    password: Yup.string()\n                        .min(6, 'Password must be at least 6 characters')\n                        .required('Password is required'),\n                    confirmPassword: Yup.string()\n                        .oneOf([Yup.ref('password'), null], 'Passwords must match')\n                        .required('Confirm Password is required'),\n\n\n                })}\n                // onSubmit={fields => {\n                //     alert('SUCCESS!! :-)\\n\\n' + JSON.stringify(fields, null, 4))\n                // }}\n            >\n                {({ errors, touched }) => (\n\n                \t<div className=\"Form col-md-8 col-lg-6\">\n                \t<div className=\"card shadow\">\n                    <Form id=\"align\">\n                    <div className=\"form-group\">\n                        <div className=\"flexdisplay\">\n                            <div className=\"form-group col-5 \">\n                                <label htmlFor=\"firstName\">First Name</label>\n                                <Field name=\"firstName\" type=\"text\" className={'form-control' + (errors.firstName && touched.firstName ? ' is-invalid' : '')} />\n                                <ErrorMessage name=\"firstName\" component=\"div\" className=\"invalid-feedback\" />\n                            </div>\n                            <div className=\"form-group col-5\">\n                                <label htmlFor=\"lastName\" className=\"marginlf\" id=\"space\">Last Name</label>\n                                <Field name=\"lastName\" type=\"text\"  className={'form-control' + (errors.lastName && touched.lastName ? ' is-invalid' : '')} />\n                                <ErrorMessage name=\"lastName\" component=\"div\" className=\"invalid-feedback\" />\n                            </div>\n                        </div>\n                        <div className=\"form-group col-5\">\n                            <label htmlFor=\"email\" >Email</label>\n                            <Field name=\"email\" type=\"text\" className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                        <div className=\"flexdisplay\">\n                            <div className=\"form-group col-5\">\n                                <label htmlFor=\"password\">Password</label>\n                                <Field name=\"password\" type=\"password\" className={'form-control' + (errors.password && touched.password ? ' is-invalid' : '')} />\n                                <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\n                            </div>\n                            <div className=\"form-group col-5\">\n                                <label htmlFor=\"confirmPassword\" className=\"marginlf\" id = \"gap\">Confirm Password</label>\n                                <Field name=\"confirmPassword\" type=\"password\" id=\"gap\" className={'form-control' + (errors.confirmPassword && touched.confirmPassword ? ' is-invalid' : '')} />\n                                <ErrorMessage name=\"confirmPassword\" component=\"div\" className=\"invalid-feedback\" />\n                            </div>\n                        </div>\n                        \n                        <div className=\"form-group col-5\">\n                            <button type=\"submit\" className=\"btn btn-secondary btn-block\">Register</button>\n                        </div>\n                    </div>    \n                    </Form>\n                    </div>\n                    </div>\n                )}\n            </Formik>\n        )\n    }\n}\n\nexport default Regform; ","import React from 'react';\nimport Form from './mainpage.js';\nimport Regform from './formikform';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"App-content\">\n          <Regform />\n          <Form />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","\nimport React from 'react';\n\n class Input extends React.Component{\n \tconstructor(props){\n \t\tsuper(props);\n        this.state = {\n            students:[{Name:\"shyjan\",Age:\"22\",RollNo:\"1111111\"},\n        \t\t\t{Name:\"ratheesh\",Age:\"23\",RollNo:\"2222222\"}]\n        \t\t}\n        this.handleChange = this.handleChange.bind(this)\n        this.onSubmit = this.onSubmit.bind(this)\n \t}\n \thandleChange(evt) {\n    \tconst key = evt.target.name;\n    \tconst value = evt.target.value;\n    \tthis.setState({[key]:value})\n\n    }\n    onSubmit(){\n    \tconst arrObj = {Name:this.state.Name,Age:this.state.Age,RollNo:this.state.RollNo}\n    \tconst arrpush = this.state.students\n    \tarrpush.push(arrObj)\n    \tthis.setState({\n    \t\tarrObj:arrpush\n    \t})\n    \tconsole.log(arrpush)\n    \tconsole.log(this.state.Age)\n    }\n \trenderTableData() {\n      return this.state.students.map((student, index) => {\n      \t// console.log(index)\n      \t// console.log(student)\n         return (\n            <tr key = {index}>\n               <td>{student.Name}</td>\n               <td>{student.Age}</td>\n               <td>{student.RollNo}</td>\n            </tr>\n         )\n      })\n   }\n \trenderHead()\n \t{\n \t\tlet header = Object.keys(this.state.students[0])\n \t\t// console.log(header)\n \t\treturn header.map((key,index) => {\n \t\treturn <th key={index}>{key}</th>\n \t\t})\n \t}\n\n\trender()\n\t{\n \t\t\t\t\tconst {Name,Age,RollNo} = this.state.students\n\n\t\treturn(\n\n\t\t\t\t<div>\n\t\t\t\t\t<input type = \"text\" placeholder =\"Enter the Name\" name=\"Name\" value = {Name}  onChange={this.handleChange}/>\n\t\t\t\t\t<input type = \"text\" placeholder = \"Enter the Age\" name=\"Age\"  value = {Age} onChange={this.handleChange}/>\n\t\t\t\t\t<input type = \"text\" placeholder = \"Enter the RollNo\" name=\"RollNo\" value ={RollNo} onChange={this.handleChange}/>\n\t\t\t\t\t<button type = \"button\" onClick={this.onSubmit}>click</button>\n\t\t\t\t\t<table>\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>{this.renderHead()}</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>{this.renderTableData()}</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t</div>\n\t\t\t)\n\t}\n}\nexport default Input;","import React from 'react';\n\nclass SampleArr extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tsample : [\"first\", \"second\"]\t\t\t\n\t\t}\n\t\tthis.onchanging = this.onchanging.bind(this)\n\t\tthis.buttonclick = this.buttonclick.bind(this)\n\n\t}\n\tonchanging(e){\n\t\tconst name = e.target.name\n\t\tconst values = e.target.value\n\t\tthis.setState({values}, () => {\n\t\t\tconsole.log(this.state)\n\t\t})\n\t}\n\tbuttonclick(){\n\t\tconst a = this.state.sample //a = [\"first\", \"second\"]\n\t\ta.push(this.state.values)// a = [\"first\", \"second\", \"third\"]\n\t\tthis.setState({\n\t\t\tsample:a\n\t\t})\n\t\tconsole.log(this.state.sample)\n\t}\n\tarrmaping(){\n\t\treturn this.state.sample.map((numbers) =>{\n\t\t\treturn <li>{numbers}</li>\n\t\t})\n\t}\n\t\n\trender(){\n\n\t\treturn(\n\t\t\t\t<div>\n\t\t\t\t\t<input type = \"text\" name= \"first1\" placeholder = \"Enter value\" value ={this.state.sample.value} onChange = {this.onchanging} />\n\t\t\t\t\t<button type = \"button\" onClick = {this.buttonclick}>click</button>\n\t\t\t\t\t<ul>{this.arrmaping()}</ul>\n\n\t\t\t\t</div>\n\t\t\t)\n\t}\n}\nexport default SampleArr;","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { validateFields } from './validation';\nimport Form from './mainpage.js';\nimport Regform from './formikform';\nimport App from \"./App.js\";\nimport Input from \"./inputs.js\";\nimport SampleArr from \"./samplearr.js\";\n\nReactDOM.render(\n\t\n\t\n\t\t<Input />, \n\t\t\n\t\n\tdocument.getElementById('root')\n\n);\n"],"sourceRoot":""}